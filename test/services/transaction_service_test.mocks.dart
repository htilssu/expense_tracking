// Mocks generated by Mockito 5.4.5 from annotations
// in expense_tracking/test/services/transaction_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:expense_tracking/domain/entity/transaction.dart' as _i2;
import 'package:expense_tracking/domain/repository/transaction_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransaction_0 extends _i1.SmartFake implements _i2.Transaction {
  _FakeTransaction_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i3.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Transaction>> findByCategory(
    String? category,
    int? page,
    int? size,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#findByCategory, [category, page, size]),
            returnValue: _i4.Future<List<_i2.Transaction>>.value(
              <_i2.Transaction>[],
            ),
          )
          as _i4.Future<List<_i2.Transaction>>);

  @override
  _i4.Future<List<_i2.Transaction>> findRecentByUserId(
    String? userId,
    int? page,
    int? size,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#findRecentByUserId, [userId, page, size]),
            returnValue: _i4.Future<List<_i2.Transaction>>.value(
              <_i2.Transaction>[],
            ),
          )
          as _i4.Future<List<_i2.Transaction>>);

  @override
  _i4.Future<List<_i2.Transaction>> findAll(int? page, int? size) =>
      (super.noSuchMethod(
            Invocation.method(#findAll, [page, size]),
            returnValue: _i4.Future<List<_i2.Transaction>>.value(
              <_i2.Transaction>[],
            ),
          )
          as _i4.Future<List<_i2.Transaction>>);

  @override
  _i4.Future<List<_i2.Transaction>> findByField(
    Map<String, dynamic>? query,
    int? page,
    int? size,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#findByField, [query, page, size]),
            returnValue: _i4.Future<List<_i2.Transaction>>.value(
              <_i2.Transaction>[],
            ),
          )
          as _i4.Future<List<_i2.Transaction>>);

  @override
  _i4.Future<_i2.Transaction?> findById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#findById, [id]),
            returnValue: _i4.Future<_i2.Transaction?>.value(),
          )
          as _i4.Future<_i2.Transaction?>);

  @override
  _i4.Future<_i2.Transaction> update(_i2.Transaction? entity) =>
      (super.noSuchMethod(
            Invocation.method(#update, [entity]),
            returnValue: _i4.Future<_i2.Transaction>.value(
              _FakeTransaction_0(this, Invocation.method(#update, [entity])),
            ),
          )
          as _i4.Future<_i2.Transaction>);

  @override
  _i4.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.Transaction> save(_i2.Transaction? entity) =>
      (super.noSuchMethod(
            Invocation.method(#save, [entity]),
            returnValue: _i4.Future<_i2.Transaction>.value(
              _FakeTransaction_0(this, Invocation.method(#save, [entity])),
            ),
          )
          as _i4.Future<_i2.Transaction>);
}
