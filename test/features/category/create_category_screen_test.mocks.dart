// Mocks generated by Mockito 5.4.5 from annotations
// in expense_tracking/test/features/category/create_category_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:expense_tracking/domain/entity/category.dart' as _i2;
import 'package:expense_tracking/domain/repository/category_repository.dart'
    as _i3;
import 'package:expense_tracking/utils/auth.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategory_0 extends _i1.SmartFake implements _i2.Category {
  _FakeCategory_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i3.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Category>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i4.Future<List<_i2.Category>>.value(<_i2.Category>[]),
          )
          as _i4.Future<List<_i2.Category>>);

  @override
  _i4.Future<_i2.Category?> findById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#findById, [id]),
            returnValue: _i4.Future<_i2.Category?>.value(),
          )
          as _i4.Future<_i2.Category?>);

  @override
  _i4.Future<_i2.Category> update(_i2.Category? entity) =>
      (super.noSuchMethod(
            Invocation.method(#update, [entity]),
            returnValue: _i4.Future<_i2.Category>.value(
              _FakeCategory_0(this, Invocation.method(#update, [entity])),
            ),
          )
          as _i4.Future<_i2.Category>);

  @override
  _i4.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.Category> save(_i2.Category? entity) =>
      (super.noSuchMethod(
            Invocation.method(#save, [entity]),
            returnValue: _i4.Future<_i2.Category>.value(
              _FakeCategory_0(this, Invocation.method(#save, [entity])),
            ),
          )
          as _i4.Future<_i2.Category>);
}

/// A class which mocks [Auth].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuth extends _i1.Mock implements _i5.Auth {
  MockAuth() {
    _i1.throwOnMissingStub(this);
  }
}
